import { List, Map, OrderedMap } from 'immutable';
import { Context } from '../models/Enums';
import { Listing } from '../models/Search';
import { AppState, Tab } from '../models/SearchState';
import { filtering, initialState, searchFacet, searchTab } from './schema';
export declare const getSearchContext: (state: AppState) => Context;
export declare const getCurrent: (state: Map<'search', typeof initialState>, context?: Context) => string;
export declare const getCurrentFacet: (state: AppState) => string;
export declare const getCurrentListing: (state: AppState) => string;
export declare const getCurrentTab: (state: AppState) => Map<string, Tab[keyof Tab]>;
export declare const getFacets: (state: AppState) => OrderedMap<string, typeof searchFacet>;
export declare const getTabFacets: (state: AppState) => OrderedMap<string, OrderedMap<string, string | number | List<any> | Map<string, boolean | List<any>> | Map<string, number | boolean | List<any>> | Map<unknown, unknown> | null>>;
export declare const getFacetTitles: (state: AppState) => {
    key: string;
    title: string | undefined;
    totalCount: number;
}[];
export declare const getFacet: (state: AppState, facetName?: string, context?: Context) => any;
export declare const getListing: (state: AppState, listing?: string) => Map<string, Listing[keyof Listing]>;
export declare const getFilters: (state: AppState, facet: string, context?: Context) => Map<string, typeof filtering>;
export declare const getRenderableFilters: (state: AppState, facet?: string, context?: Context) => Map<string, Map<string, string | boolean | List<import("../models/Search").CustomWhereClause> | List<Map<string, string | boolean>>>>;
export declare const getFiltersToLoad: (state: AppState, facet: string, context?: Context) => List<string | null>;
export declare const getSelectedFilters: (state: AppState, facet?: string, context?: Context) => Map<string, List<string>>;
export declare const getResults: (state: AppState, current?: string, context?: Context) => List<any>;
export declare const getIsInternalPaging: (state: AppState, current: string, context?: Context) => any;
export declare const getIsLoaded: (state: AppState, context?: Context, facet?: string | undefined) => boolean;
export declare const getIsLoading: (state: AppState, context?: Context, facet?: string | undefined) => any;
export declare const getIsSsr: (state: AppState) => boolean;
export declare const getFeaturedResults: (state: AppState, current?: string, context?: Context) => any;
export declare const getPaging: (state: AppState, current?: string, context?: Context) => any;
export declare const getPageIndex: (state: AppState, current?: string, context?: Context) => number;
export declare const getPrevPageIndex: (state: AppState, current?: string, context?: Context) => any;
export declare const getPageIsLoading: (state: AppState, current?: string, context?: Context) => any;
export declare const getPagesLoaded: (state: AppState, current?: string, context?: Context) => any;
export declare const getTotalCount: (state: AppState, current?: string, context?: Context) => any;
export declare const getFacetAuthentication: (state: AppState, facet: string) => any;
export declare const getFeaturedEntryIds: (state: AppState) => Map<string, string>;
export declare const getSearchTerm: (state: AppState) => any;
export declare const getSearchTabs: (state: AppState) => List<typeof searchTab>;
export declare const getQueryParams: (state: AppState, current?: string, context?: Context) => Map<string, any>;
export declare const getQueryParameter: ({ state, facet, context, }: {
    state: AppState;
    facet?: string | undefined;
    context?: Context | undefined;
}, key: string, ifnull?: any) => any;
export declare const getCustomApi: (state: AppState, current: string, context?: Context) => any;
export declare const getCustomEnv: (state: AppState, current: string, context?: Context) => any;
export declare const getTabsAndFacets: (state: AppState) => List<Map<string, string | number | OrderedMap<unknown, unknown> | undefined>>;
export declare const getSearchTotalCount: (state: AppState) => any;
export declare const getFacetsTotalCount: (state: AppState) => number;
export declare const selectFacets: {
    getCurrent: (state: AppState) => string;
    getCurrentTab: (state: AppState) => Map<string, Tab[keyof Tab]>;
    getCustomApi: (state: AppState, current: string, context?: Context) => any;
    getCustomEnv: (state: AppState, current: string, context?: Context) => any;
    getFacet: (state: AppState, facetName?: string, context?: Context) => any;
    getFacetTitles: (state: AppState) => {
        key: string;
        title: string | undefined;
        totalCount: number;
    }[];
    getFacets: (state: AppState) => OrderedMap<string, typeof searchFacet>;
    getFacetsTotalCount: (state: AppState) => number;
    getFeaturedResults: (state: AppState, current?: string, context?: Context) => any;
    getFilters: (state: AppState, facet: string, context?: Context) => Map<string, typeof filtering>;
    getFiltersToLoad: (state: AppState, facet: string, context?: Context) => List<string | null>;
    getIsLoaded: (state: AppState, context?: Context, facet?: string | undefined) => boolean;
    getIsLoading: (state: AppState, context?: Context, facet?: string | undefined) => any;
    getPageIndex: (state: AppState, current?: string, context?: Context) => number;
    getPageIsLoading: (state: AppState, current?: string, context?: Context) => any;
    getPagesLoaded: (state: AppState, current?: string, context?: Context) => any;
    getPaging: (state: AppState, current?: string, context?: Context) => any;
    getQueryParams: (state: AppState, facet: string) => Map<string, any>;
    getQueryParameter: ({ state, facet }: {
        state: AppState;
        facet: string;
    }, key: string, ifnull: any) => any;
    getRenderableFilters: (state: AppState, facet?: string, context?: Context) => Map<string, Map<string, string | boolean | List<import("../models/Search").CustomWhereClause> | List<Map<string, string | boolean>>>>;
    getResults: (state: AppState, current?: string, context?: Context) => List<any>;
    getTabFacets: (state: AppState) => OrderedMap<string, OrderedMap<string, string | number | List<any> | Map<string, boolean | List<any>> | Map<string, number | boolean | List<any>> | Map<unknown, unknown> | null>>;
    getTabsAndFacets: (state: AppState) => List<Map<string, string | number | OrderedMap<unknown, unknown> | undefined>>;
    getTotalCount: (state: AppState, current?: string, context?: Context) => any;
    getSearchTabs: (state: AppState) => List<typeof searchTab>;
    getSearchTerm: (state: AppState) => any;
    getSearchTotalCount: (state: AppState) => any;
    getSelectedFilters: (state: AppState, facet?: string, context?: Context) => Map<string, List<string>>;
};
export declare const selectListing: {
    getCurrent: (state: AppState) => string;
    getFeaturedResults: (state: AppState, listing?: string) => any;
    getFilters: (state: AppState, listing?: string) => Map<string, Map<string, string | boolean | List<import("../models/Search").CustomWhereClause> | List<Map<string, string | boolean>>>>;
    getFiltersToLoad: (state: AppState, listing?: string) => List<string | null>;
    getListing: (state: AppState, listing?: string) => Map<string, Listing[keyof Listing]>;
    getIsLoaded: (state: AppState) => boolean;
    getIsLoading: (state: AppState) => any;
    getPageIndex: (state: AppState, listing?: string) => number;
    getPaging: (state: AppState, listing?: string) => any;
    getPageIsLoading: (state: AppState, listing?: string) => any;
    getPagesLoaded: (state: AppState, listing?: string) => any;
    getQueryParams: (state: AppState, listing?: string) => Map<string, any>;
    getQueryParameter: ({ state, facet }: {
        state: AppState;
        facet?: string | undefined;
    }, key: string, ifnull: any) => any;
    getRenderableFilters: (state: AppState, listing?: string) => Map<string, Map<string, string | boolean | List<import("../models/Search").CustomWhereClause> | List<Map<string, string | boolean>>>>;
    getResults: (state: AppState, listing?: string) => List<any>;
    getSearchTerm: (state: AppState) => any;
    getTotalCount: (state: AppState, listing?: string) => any;
    getSelectedFilters: (state: AppState, listing?: string) => Map<string, List<string>>;
};
export declare const selectCurrentPath: (state: AppState) => any;
export declare const selectVersionStatus: (state: AppState) => any;
