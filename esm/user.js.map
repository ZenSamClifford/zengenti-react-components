{"version":3,"file":"user.js","sources":["../src/app/features/login/components/withLogin.js"],"sourcesContent":["import { connect } from 'react-redux';\nimport {\n  loginUser,\n  logoutUser,\n  toggleLoginMode,\n  forgotPassword,\n  changePassword,\n  changePasswordWithToken,\n  setRecaptchaResponse,\n} from '../redux/actions';\nimport {\n  selectUser,\n  selectUserMessage,\n  selectLoginScreenMode,\n  selectPasswordMessage,\n  selectChangePasswordMessage,\n  selectCaptchaSiteKey,\n  selectCaptchaResponse,\n  selectUserLoggedIn,\n} from '../redux/selectors';\nimport { toJS } from '~/core/util/ToJs';\nimport {\n  selectCurrentPath,\n  selectQueryStringAsObject,\n} from '~/core/redux/selectors/routing';\n\nconst getDisplayName = WrappedComponent => {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n};\n\nconst withLogin = WrappedComponent => {\n  // Returns a redux-connected component with the following props:\n  // this.propTypes = {\n  //   loginUser: PropTypes.func,\n  //   logoutUser: PropTypes.func,\n  //   user: PropTypes.object,\n  // };\n\n  const mapStateToProps = state => {\n    return {\n      user: selectUser(state),\n      userMessage: selectUserMessage(state),\n      screenMode: selectLoginScreenMode(state),\n      passwordMessage: selectPasswordMessage(state),\n      changePasswordMessage: selectChangePasswordMessage(state),\n      captchaSiteKey: selectCaptchaSiteKey(state),\n      isHuman: selectCaptchaResponse(state),\n      isLoggedIn: selectUserLoggedIn(state),\n      currentPath: selectCurrentPath(state),\n      queryString: selectQueryStringAsObject(state),\n    };\n  };\n\n  const mapDispatchToProps = {\n    loginUser,\n    logoutUser,\n    toggleLoginMode,\n    forgotPassword,\n    changePassword,\n    changePasswordWithToken,\n    captchaResponse: setRecaptchaResponse,\n  };\n\n  const ConnectedComponent = connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(toJS(WrappedComponent));\n\n  ConnectedComponent.displayName = `${getDisplayName(WrappedComponent)}`;\n\n  return ConnectedComponent;\n};\n\nexport default withLogin;\n"],"names":["getDisplayName","WrappedComponent","displayName","name","withLogin","mapStateToProps","state","user","selectUser","userMessage","selectUserMessage","screenMode","selectLoginScreenMode","passwordMessage","selectPasswordMessage","changePasswordMessage","selectChangePasswordMessage","captchaSiteKey","selectCaptchaSiteKey","isHuman","selectCaptchaResponse","isLoggedIn","selectUserLoggedIn","currentPath","selectCurrentPath","queryString","selectQueryStringAsObject","mapDispatchToProps","loginUser","logoutUser","toggleLoginMode","forgotPassword","changePassword","changePasswordWithToken","captchaResponse","setRecaptchaResponse","ConnectedComponent","connect","toJS"],"mappings":";;;;;;;;;;;;;AA0BA,MAAMA,cAAc,GAAGC,gBAAgB,IAAI;AACzC,SAAOA,gBAAgB,CAACC,WAAjB,IAAgCD,gBAAgB,CAACE,IAAjD,IAAyD,WAAhE;AACD,CAFD;;MAIMC,SAAS,GAAGH,gBAAgB,IAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMI,eAAe,GAAGC,KAAK,IAAI;AAC/B,WAAO;AACLC,MAAAA,IAAI,EAAEC,UAAU,CAACF,KAAD,CADX;AAELG,MAAAA,WAAW,EAAEC,iBAAiB,CAACJ,KAAD,CAFzB;AAGLK,MAAAA,UAAU,EAAEC,qBAAqB,CAACN,KAAD,CAH5B;AAILO,MAAAA,eAAe,EAAEC,qBAAqB,CAACR,KAAD,CAJjC;AAKLS,MAAAA,qBAAqB,EAAEC,2BAA2B,CAACV,KAAD,CAL7C;AAMLW,MAAAA,cAAc,EAAEC,oBAAoB,CAACZ,KAAD,CAN/B;AAOLa,MAAAA,OAAO,EAAEC,qBAAqB,CAACd,KAAD,CAPzB;AAQLe,MAAAA,UAAU,EAAEC,kBAAkB,CAAChB,KAAD,CARzB;AASLiB,MAAAA,WAAW,EAAEC,iBAAiB,CAAClB,KAAD,CATzB;AAULmB,MAAAA,WAAW,EAAEC,yBAAyB,CAACpB,KAAD;AAVjC,KAAP;AAYD,GAbD;;AAeA,QAAMqB,kBAAkB,GAAG;AACzBC,IAAAA,SADyB;AAEzBC,IAAAA,UAFyB;AAGzBC,IAAAA,eAHyB;AAIzBC,IAAAA,cAJyB;AAKzBC,IAAAA,cALyB;AAMzBC,IAAAA,uBANyB;AAOzBC,IAAAA,eAAe,EAAEC;AAPQ,GAA3B;AAUA,QAAMC,kBAAkB,GAAGC,OAAO,CAChChC,eADgC,EAEhCsB,kBAFgC,CAAP,CAGzBW,IAAI,CAACrC,gBAAD,CAHqB,CAA3B;AAKAmC,EAAAA,kBAAkB,CAAClC,WAAnB,GAAkC,GAAEF,cAAc,CAACC,gBAAD,CAAmB,EAArE;AAEA,SAAOmC,kBAAP;AACD;;;;"}