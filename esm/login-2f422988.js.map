{"version":3,"file":"login-2f422988.js","sources":["../src/app/core/util/ContensisManagementApi.js","../src/app/features/login/transformations/mapClientCredentials.js","../src/app/features/login/util/CookieHelper.class.js","../src/app/features/login/util/OidcUserManager.js","../src/app/features/login/util/LoginHelper.class.js","../src/app/features/login/redux/sagas/login.js"],"sourcesContent":["// import { Client } from 'contensis-management-api';\n\nexport const getManagementApiClient = async ({\n  bearerToken,\n  bearerTokenExpiryDate,\n  refreshToken,\n  refreshTokenExpiryDate,\n  contensisClassicToken,\n  username,\n  password,\n}) => {\n  const rootUrl = SERVERS.api || SERVERS.cms; /* global SERVERS */\n  const projectId = PROJECTS[0].id; /* global PROJECTS */\n\n  let config = {};\n  if (refreshToken) {\n    config = {\n      clientType: 'contensis_classic_refresh_token',\n      clientDetails: {\n        refreshToken,\n      },\n    };\n  } else {\n    config = {\n      clientType: 'contensis_classic',\n      clientDetails: {\n        username,\n        password,\n      },\n    };\n  }\n  const { Client } = await import('contensis-management-api');\n\n  const client = Client.create({\n    ...config,\n    projectId,\n    rootUrl,\n  });\n\n  if (bearerToken) client.bearerToken = bearerToken;\n  if (bearerTokenExpiryDate)\n    client.bearerTokenExpiryDate = bearerTokenExpiryDate;\n  if (refreshToken) client.refreshToken = refreshToken;\n  if (refreshTokenExpiryDate)\n    client.refreshTokenExpiryDate = refreshTokenExpiryDate;\n  if (contensisClassicToken)\n    client.contensisClassicToken = contensisClassicToken;\n\n  return client;\n};\n","import { mapJson } from '~/core/util/json-mapper';\n\nconst clientCredentials = {\n  bearerToken: 'bearerToken',\n  bearerTokenExpiryDate: ({ bearerTokenExpiryDate }) =>\n    bearerTokenExpiryDate.toISOString(),\n  refreshToken: 'refreshToken',\n  refreshTokenExpiryDate: ({ refreshTokenExpiryDate }) =>\n    refreshTokenExpiryDate.toISOString(),\n  contensisClassicToken: 'contensisClassicToken',\n};\nexport default obj => mapJson(obj, clientCredentials);\n","import Cookies from 'js-cookie';\n\nconst COOKIE_VALID_DAYS = 1; // 0 = Session cookie\n\n// Override the default js-cookie conversion / encoding\n// methods so the written values work with Contensis sites\nconst _cookie = Cookies.withConverter({\n  read: value => decodeURIComponent(value),\n  write: value => encodeURIComponent(value),\n});\n\nexport class CookieHelper {\n  static GetCookie(name) {\n    let cookie = _cookie.get(name);\n    if (typeof cookie == 'undefined') {\n      return null;\n    }\n    return cookie;\n  }\n\n  static SetCookie(name, value, maxAgeDays = COOKIE_VALID_DAYS) {\n    maxAgeDays === 0\n      ? _cookie.set(name, value)\n      : _cookie.set(name, value, { expires: maxAgeDays });\n  }\n\n  static DeleteCookie(name) {\n    _cookie.remove(name);\n  }\n}\n","const context = typeof window != 'undefined' ? window : global;\nconst requireOidc =\n  process.env.NODE_ENV === 'development'\n    ? WSFED_LOGIN === 'true' /* global WSFED_LOGIN */\n    : context.WSFED_LOGIN === 'true';\n\nconst servers = SERVERS; /* global SERVERS */\n\nconst userManagerConfig =\n  typeof window !== 'undefined'\n    ? {\n        authority: `${servers.cms}/authenticate/`,\n        client_id: 'WebsiteAdfsClient',\n        redirect_uri: window.location.toString(),\n        post_logout_redirect_uri: window.location.toString(),\n        response_type: 'id_token',\n        scope: 'openid',\n        filterProtocolClaims: false,\n      }\n    : {};\n\nconst createUserManager = config => {\n  if (typeof window !== 'undefined' && requireOidc) {\n    try {\n      const UserManager = require('oidc-client').UserManager;\n      return new UserManager(config);\n    } catch (e) {\n      //\n    }\n  } else return {};\n};\n\nconst userManager = createUserManager(userManagerConfig);\n\nexport default userManager;\n","/* eslint-disable require-atomic-updates */\nimport { getManagementApiClient } from '~/core/util/ContensisManagementApi';\nimport { to } from 'await-to-js';\n\nimport { CookieHelper } from './CookieHelper.class';\n\nimport mapClientCredentials from '../transformations/mapClientCredentials';\nimport userManager from './OidcUserManager';\n\nexport const LOGIN_COOKIE = 'ContensisCMSUserName';\nexport const REFRESH_TOKEN_COOKIE = 'RefreshToken';\n\nconst context = typeof window != 'undefined' ? window : global;\n\nexport class LoginHelper {\n  static CMS_URL = SERVERS.cms /* global SERVERS */;\n  static WSFED_LOGIN =\n    process.env.NODE_ENV === 'development'\n      ? WSFED_LOGIN === 'true' /* global WSFED_LOGIN */\n      : context.WSFED_LOGIN === 'true';\n  static LOGIN_ROUTE = '/account/login';\n  static ACCESS_DENIED_ROUTE = '/account/access-denied';\n\n  static SetLoginCookies({ contensisClassicToken, refreshToken }) {\n    if (contensisClassicToken)\n      CookieHelper.SetCookie(LOGIN_COOKIE, contensisClassicToken);\n    if (refreshToken)\n      CookieHelper.SetCookie(REFRESH_TOKEN_COOKIE, refreshToken);\n  }\n\n  static GetCachedCredentials() {\n    return {\n      bearerToken: null,\n      bearerTokenExpiryDate: null,\n      refreshToken: CookieHelper.GetCookie(REFRESH_TOKEN_COOKIE),\n      refreshTokenExpiryDate: null,\n      contensisClassicToken: CookieHelper.GetCookie(LOGIN_COOKIE),\n    };\n  }\n\n  static ClearCachedCredentials() {\n    CookieHelper.DeleteCookie(LOGIN_COOKIE);\n    CookieHelper.DeleteCookie(REFRESH_TOKEN_COOKIE);\n  }\n\n  static async LoginUser({ username, password, clientCredentials }) {\n    let credentials = clientCredentials;\n    let authenticationState = {\n      authenticated: false,\n      authenticationError: false,\n      error: false,\n      clientCredentials: null,\n    };\n    let transientClient;\n    let user;\n\n    if (username && password) {\n      // Get a management client with username and password\n      transientClient = await getManagementApiClient({\n        username,\n        password,\n      });\n\n      // Ensure the client has requested a bearer token\n      const [loginError, clientBearerToken] = await to(\n        transientClient.ensureBearerToken()\n      );\n\n      // Problem getting token with username and password\n      if (loginError) {\n        const authenticationError = loginError.name.includes(\n          'ContensisAuthenticationError'\n        );\n        authenticationState = {\n          authenticated: false,\n          authenticationError: authenticationError,\n          error: !authenticationError,\n          clientCredentials: null,\n        };\n        LoginHelper.ClearCachedCredentials();\n      }\n\n      // Got a token using username and password\n      if (clientBearerToken) {\n        // Set credentials so we can continue to GetUserDetails\n        credentials = mapClientCredentials(transientClient);\n        LoginHelper.SetLoginCookies(credentials);\n        authenticationState = {\n          authenticated: true,\n          authenticationError: false,\n          error: false,\n          clientCredentials: credentials,\n        };\n      }\n    }\n\n    // If we have credentials supplied by a successful username and password login\n    // or clientCredentials supplied in the options argument we can continue to\n    // fetch the user's details\n    if (credentials) {\n      const client =\n        transientClient || (await getManagementApiClient(credentials));\n      const [error, userDetails] = await LoginHelper.GetUserDetails(client);\n\n      if (error) {\n        authenticationState = {\n          authenticated: false,\n          authenticationError: false,\n          error: { message: error.message, stack: error.stack },\n          clientCredentials: null,\n        };\n        LoginHelper.ClearCachedCredentials();\n      } else {\n        // Ensure we get latest refreshToken and contensisClassicToken from the latest client\n        const latestCredentials = mapClientCredentials(client);\n        LoginHelper.SetLoginCookies(latestCredentials);\n\n        user = userDetails;\n        authenticationState = {\n          authenticated: true,\n          authenticationError: false,\n          error: false,\n          clientCredentials: latestCredentials,\n        };\n      }\n    }\n\n    return { authenticationState, user };\n  }\n\n  static GetUserDetails = async client => {\n    let userError,\n      groupsError,\n      user = {},\n      groupsResult;\n\n    [userError, user] = await to(client.security.users.getCurrent());\n    if (user && user.id) {\n      [groupsError, groupsResult] = await to(\n        client.security.users.getUserGroups({\n          userId: user.id,\n          includeInherited: true,\n        })\n      );\n      // Set groups attribute in user object to be the items\n      // array from the getUserGroups result\n      if (groupsResult && groupsResult.items) user.groups = groupsResult.items;\n\n      //If groups call fails then log the error but allow the user to login still\n      // eslint-disable-next-line no-console\n      if (groupsError) console.log(groupsError);\n    }\n    return [userError, user];\n  };\n\n  static LogoutUser(redirectPath) {\n    LoginHelper.ClearCachedCredentials();\n    if (LoginHelper.WSFED_LOGIN) {\n      LoginHelper.WsFedLogout(redirectPath);\n    } else {\n      if (redirectPath) LoginHelper.ClientRedirectToPath(redirectPath);\n      else LoginHelper.ClientRedirectToSignInPage();\n    }\n  }\n\n  static ClientRedirectToHome(location) {\n    if (typeof window != 'undefined') {\n      let url = '/';\n      if (location) {\n        const { search, hash } = location.toJS();\n        url = search ? `${url}${search}` : url;\n        url = hash ? `${url}${hash}` : url;\n      }\n      window.location.href = url;\n    }\n  }\n\n  static async ClientRedirectToSignInPage(redirectPath) {\n    if (LoginHelper.WSFED_LOGIN) {\n      await LoginHelper.WsFedLogout();\n      LoginHelper.WsFedLogin();\n    } else {\n      // Standard Contensis Login\n      let url = LoginHelper.LOGIN_ROUTE;\n      if (typeof redirectPath === 'string')\n        url = `${url}?redirect_uri=${redirectPath}`;\n      if (\n        typeof location !== 'undefined' &&\n        redirectPath !== LoginHelper.LOGIN_ROUTE\n      )\n        location.replace(url);\n    }\n  }\n\n  static ClientRedirectToAccessDeniedPage(originalPath) {\n    let url = LoginHelper.ACCESS_DENIED_ROUTE;\n    if (originalPath === url) return;\n\n    if (typeof originalPath === 'string')\n      url = `${url}?original_uri=${originalPath}`;\n    if (typeof location !== 'undefined') location.href = url;\n  }\n\n  static ClientRedirectToPath(redirectPath) {\n    if (typeof redirectPath === 'string') {\n      if (typeof location !== 'undefined') window.location.href = redirectPath;\n    } else LoginHelper.ClientRedirectToHome();\n  }\n\n  static WsFedLogin(redirectUri) {\n    userManager.signinRedirect({\n      scope: 'openid',\n      response_type: 'id_token',\n      redirect_uri: redirectUri || window.location.toString(),\n    });\n  }\n\n  static async WsFedLogout(redirectPath) {\n    await fetch(\n      `${LoginHelper.CMS_URL}/authenticate/logout?jsonResponseRequired=true`,\n      {\n        credentials: 'include',\n      }\n    );\n    if (redirectPath) {\n      window.location = redirectPath;\n    }\n  }\n\n  static async GetCredentialsForSecurityToken(securityToken) {\n    const [error, response] = await to(\n      fetch(`${LoginHelper.CMS_URL}/REST/Contensis/Security/IsAuthenticated`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          securityToken: encodeURIComponent(securityToken),\n        }),\n      })\n    );\n    if (error) return [{ message: 'Failed to fetch credentials' }];\n    if (response.ok) {\n      const [parseError, body] = await to(response.json());\n      if (parseError) return [parseError];\n\n      const { LogonResult, ApplicationData = [] } = body;\n      if (LogonResult !== 0) {\n        return [\n          { message: 'Security token is invalid', data: ApplicationData },\n        ];\n      }\n      if (ApplicationData.length > 0) {\n        let refreshToken;\n        ApplicationData.forEach(item => {\n          if (item.Key === 'ContensisSecurityRefreshToken')\n            refreshToken = item.Value;\n        });\n        if (!refreshToken) {\n          return [\n            {\n              message:\n                'Fetch credentials: Unable to find ContensisSecurityRefreshToken',\n            },\n          ];\n        }\n        return [undefined, refreshToken];\n      } else {\n        return [\n          {\n            message:\n              'Fetch credentials: Unable to find ContensisSecurityRefreshToken',\n          },\n        ];\n      }\n    } else {\n      return [\n        {\n          message: `Fetch credentials error: ${response.status} ${response.statusText}`,\n        },\n      ];\n    }\n  }\n\n  static isZengentiStaff(email) {\n    const emailRefs = ['@zengenti', '@contensis'];\n\n    return emailRefs.some(emailRef => {\n      if (email.includes(emailRef)) {\n        return true;\n      }\n    });\n  }\n}\n","import { Map } from 'immutable';\nimport { takeEvery, select, put, call } from 'redux-saga/effects';\nimport {\n  SET_AUTHENTICATION_STATE,\n  LOGIN_USER,\n  LOGOUT_USER,\n  VALIDATE_USER,\n} from '../types';\nimport {\n  selectUserIsAuthenticated,\n  selectClientCredentials,\n  selectUserGroups,\n} from '../selectors';\n\nimport { setRoute } from '~/core/redux/actions/routing';\nimport { selectCurrentSearch } from '~/core/redux/selectors/routing';\nimport { getManagementApiClient } from '~/core/util/ContensisManagementApi';\nimport { findContentTypeMapping } from '~/core/util/helpers';\nimport { queryParams } from '~/core/util/navigation';\nimport mapClientCredentials from '../../transformations/mapClientCredentials';\nimport { LoginHelper } from '../../util/LoginHelper.class';\nimport { matchUserGroup } from '../../util/matchGroups';\n\nexport const loginSagas = [\n  takeEvery(LOGIN_USER, loginUserSaga),\n  takeEvery(LOGOUT_USER, logoutUserSaga),\n  takeEvery(VALIDATE_USER, validateUserSaga),\n  takeEvery(SET_AUTHENTICATION_STATE, redirectAfterSuccessfulLoginSaga),\n];\n\nexport function* handleRequiresLoginSaga(action) {\n  const {\n    entry,\n    requireLogin,\n    routes: { ContentTypeMappings },\n    staticRoute,\n  } = action;\n  let userLoggedIn = yield select(selectUserIsAuthenticated);\n\n  // Check for a securityToken in querystring\n  const currentQs = queryParams(yield select(selectCurrentSearch));\n  const securityToken = currentQs.securityToken || currentQs.securitytoken;\n\n  // Check if any of the defined routes have \"requireLogin\" attribute\n  const { requireLogin: authRoute } = (staticRoute && staticRoute.route) || {};\n  const { requireLogin: authContentType } =\n    (entry &&\n      findContentTypeMapping(ContentTypeMappings, entry.sys.contentTypeId)) ||\n    {};\n\n  // If requireLogin, authRoute or authContentType has been specified as an\n  // array of groups we can merge all the arrays and match on any group supplied\n  const routeRequiresGroups = [\n    ...((Array.isArray(authContentType) && authContentType) || []),\n    ...((Array.isArray(authRoute) && authRoute) || []),\n    ...((Array.isArray(requireLogin) && requireLogin) || []),\n  ];\n  const routeRequiresLogin = !!authContentType || !!authRoute || !!requireLogin;\n\n  if (!userLoggedIn) {\n    // If cookies or securityToken are found on any route change\n    // always validate and login the user\n    if (routeRequiresLogin) {\n      // If routeRequiresLogin do a blocking call that returns userLoggedIn\n      userLoggedIn = yield call(validateUserSaga, { securityToken });\n    }\n    // otherwise do a non blocking put to handle validation in the background\n    else yield put({ type: VALIDATE_USER, securityToken });\n  }\n\n  if (routeRequiresLogin) {\n    // If a security token is in the querystring and we are not already\n    // logged in something is wrong and we won't bother going on another redirect loop\n    if (!userLoggedIn && !securityToken) {\n      LoginHelper.ClientRedirectToSignInPage(action.location.pathname);\n    } else if (routeRequiresGroups.length > 0) {\n      const userGroups = (yield select(selectUserGroups)).toJS();\n      const groupMatch = matchUserGroup(userGroups, routeRequiresGroups);\n\n      if (!groupMatch)\n        LoginHelper.ClientRedirectToAccessDeniedPage(action.location.pathname);\n    }\n  }\n}\n\nfunction* validateUserSaga({ securityToken }) {\n  if (securityToken) {\n    // If we have just a security token we will call a CMS endpoint\n    // and provide us with a RefreshToken cookie we can use during login\n    const [\n      error,\n      refreshToken,\n    ] = yield LoginHelper.GetCredentialsForSecurityToken(securityToken);\n    if (refreshToken)\n      LoginHelper.SetLoginCookies({\n        contensisClassicToken: securityToken,\n        refreshToken,\n      });\n    if (error)\n      yield put({\n        type: SET_AUTHENTICATION_STATE,\n        authenticationState: {\n          error: { message: error.message, stack: error.stack },\n        },\n      });\n  }\n\n  // Check for refreshToken in cookies\n  const clientCredentials = LoginHelper.GetCachedCredentials();\n\n  // Log the user in if a refreshToken is found\n  if (clientCredentials.refreshToken)\n    yield call(loginUserSaga, { clientCredentials });\n\n  // Tell any callers have we successfully logged in?\n  return yield select(selectUserIsAuthenticated);\n}\n\nfunction* loginUserSaga(action = {}) {\n  const { username, password, clientCredentials } = action;\n\n  // If a WSFED_LOGIN site has dispatched the loginUser action\n  // just redirect them to the Identity Provider sign in\n  if (action.type === LOGIN_USER && LoginHelper.WSFED_LOGIN)\n    LoginHelper.ClientRedirectToSignInPage();\n\n  const { authenticationState, user } = yield LoginHelper.LoginUser({\n    username,\n    password,\n    clientCredentials,\n  });\n\n  yield put({\n    type: SET_AUTHENTICATION_STATE,\n    authenticationState,\n    user,\n  });\n}\nconst removeHostnamePart = path => {\n  // eslint-disable-next-line no-console\n  console.log(path);\n  const relativePath =\n    '/' +\n    path\n      .split('/')\n      .splice(3)\n      .join('/');\n  // eslint-disable-next-line no-console\n  console.log(relativePath);\n  return relativePath;\n};\n\nfunction* redirectAfterSuccessfulLoginSaga() {\n  const isLoggedIn = yield select(selectUserIsAuthenticated);\n  const {\n    redirect_uri: redirectPath,\n    ReturnURL: assetRedirectPath,\n  } = queryParams(yield select(selectCurrentSearch));\n\n  if (isLoggedIn && assetRedirectPath && typeof window != 'undefined') {\n    const path = removeHostnamePart(assetRedirectPath);\n    // This has to be a hard href to get the app to\n    // leave React and hit the server for the IIS hosted assets\n    window.location.href = path;\n    // yield put(setRoute(path)); // does not work in this scenario\n  } else if (isLoggedIn && redirectPath) {\n    yield put(setRoute(redirectPath));\n  }\n}\n\nfunction* logoutUserSaga({ redirectPath }) {\n  yield put({\n    type: SET_AUTHENTICATION_STATE,\n    user: null,\n  });\n  yield LoginHelper.LogoutUser(redirectPath);\n}\n\nexport function* refreshSecurityToken() {\n  const clientCredentials = (\n    (yield select(selectClientCredentials)) || Map()\n  ).toJS();\n  if (Object.keys(clientCredentials).length > 0) {\n    const client = yield getManagementApiClient(clientCredentials);\n    yield client.authenticate();\n\n    const authenticationState = {};\n\n    const newClientCredentials = mapClientCredentials(client);\n\n    authenticationState.clientCredentials = newClientCredentials;\n\n    yield put({\n      type: SET_AUTHENTICATION_STATE,\n      authenticationState,\n    });\n  }\n}\n"],"names":["getManagementApiClient","bearerToken","bearerTokenExpiryDate","refreshToken","refreshTokenExpiryDate","contensisClassicToken","username","password","rootUrl","SERVERS","api","cms","projectId","PROJECTS","id","config","clientType","clientDetails","Client","client","create","clientCredentials","toISOString","obj","mapJson","COOKIE_VALID_DAYS","_cookie","Cookies","withConverter","read","value","decodeURIComponent","write","encodeURIComponent","CookieHelper","GetCookie","name","cookie","get","SetCookie","maxAgeDays","set","expires","DeleteCookie","remove","context","window","global","requireOidc","process","env","NODE_ENV","WSFED_LOGIN","servers","userManagerConfig","authority","client_id","redirect_uri","location","toString","post_logout_redirect_uri","response_type","scope","filterProtocolClaims","createUserManager","UserManager","require","e","userManager","LOGIN_COOKIE","REFRESH_TOKEN_COOKIE","LoginHelper","SetLoginCookies","GetCachedCredentials","ClearCachedCredentials","LoginUser","credentials","authenticationState","authenticated","authenticationError","error","transientClient","user","loginError","clientBearerToken","to","ensureBearerToken","includes","mapClientCredentials","userDetails","GetUserDetails","message","stack","latestCredentials","LogoutUser","redirectPath","WsFedLogout","ClientRedirectToPath","ClientRedirectToSignInPage","ClientRedirectToHome","url","search","hash","toJS","href","WsFedLogin","LOGIN_ROUTE","replace","ClientRedirectToAccessDeniedPage","originalPath","ACCESS_DENIED_ROUTE","redirectUri","signinRedirect","fetch","CMS_URL","GetCredentialsForSecurityToken","securityToken","response","method","headers","Accept","body","JSON","stringify","ok","parseError","json","LogonResult","ApplicationData","data","length","forEach","item","Key","Value","undefined","status","statusText","isZengentiStaff","email","emailRefs","some","emailRef","userError","groupsError","groupsResult","security","users","getCurrent","getUserGroups","userId","includeInherited","items","groups","console","log","loginSagas","takeEvery","LOGIN_USER","loginUserSaga","LOGOUT_USER","logoutUserSaga","VALIDATE_USER","validateUserSaga","SET_AUTHENTICATION_STATE","redirectAfterSuccessfulLoginSaga","handleRequiresLoginSaga","action","entry","requireLogin","routes","ContentTypeMappings","staticRoute","userLoggedIn","select","selectUserIsAuthenticated","currentQs","queryParams","selectCurrentSearch","securitytoken","authRoute","route","authContentType","findContentTypeMapping","sys","contentTypeId","routeRequiresGroups","Array","isArray","routeRequiresLogin","call","put","type","pathname","userGroups","selectUserGroups","groupMatch","matchUserGroup","removeHostnamePart","path","relativePath","split","splice","join","isLoggedIn","ReturnURL","assetRedirectPath","setRoute","refreshSecurityToken","selectClientCredentials","Map","Object","keys","authenticate","newClientCredentials"],"mappings":"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"}